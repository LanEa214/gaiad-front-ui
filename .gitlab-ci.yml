image: $REGISTRY_URL/k8s/docker:19.03.12-dind-tools-nodejs


variables:
  DOCKER_HOST: tcp://localhost:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "/certs/client"
  DOCKER_TLS_VERIFY: 1
  DOCKER_DAEMON_OPTIONS: --insecure-registry=$REGISTRY_URL

services:
  - name: $REGISTRY_URL/k8s/docker:19.03.12-dind-tools-nodejs
    entrypoint: ["sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS"]

before_script:
  - until docker info; do sleep 2; done
  - docker login $REGISTRY_URL --username $HARBOR_USERNAME --password $HARBOR_PASSWORD

  - export RELEASE_FLAG=$(echo $CI_BUILD_REF_NAME | grep -c release)
  - export BranchLabel=$([[ $RELEASE_FLAG = 1 ]] && echo ${CI_BUILD_REF_NAME#release*/} || echo $CI_BUILD_REF_NAME)
  - export BASE_VERSION=$(echo $BranchLabel | awk '{sub("\/","-");print$1}')-${CI_COMMIT_SHA:0:7}
  - export RELEASE_VERSION=$BranchLabel-${CI_COMMIT_SHA:0:7}
  - export IMAGE_VERSION=$([[ ${RELEASE_FLAG} = 1 ]] && echo $RELEASE_VERSION || echo $BASE_VERSION)
  - export HARBOR_GROUP_NAME=${CI_PROJECT_NAMESPACE,,}
  - export APP_NAME=${CI_PROJECT_NAME,,}
  
  - git submodule deinit --force --all
  - rm -rf .git/modules/
  - git submodule sync --recursive
  - git submodule update --init --remote --recursive --force
  - git fetch

stages:
  # - lint
  - build

# cache:
#   paths:
#     - node_modules

# lint-dev:
#   stage: lint
#   cache:
#     paths:
#       - node_modules
#     policy: push
#   script:
#     - NAME=dev
#     - sed -i "s@\$NPM_URL@$NPM_URL@g" .npmrcs/ci
#     - sed -i "s@\$NODE_SASS_URL@$NODE_SASS_URL@g" .npmrcs/ci
#     - sed -i "s@\$NPM_AUTH@$NPM_AUTH@g" .npmrcs/ci
#     - export NPMRC_STORE=.npmrcs
#     - export NPMRC=.npmrc
#     - npm install -g yarn
#     - yarn install | while IFS= read -r line; do printf '%s %s\n' "$(date)" "$line"; done
#     - npm run lint | while IFS= read -r line; do printf '%s %s\n' "$(date)" "$line"; done
#   only:
#     - dev
#     - /^dev-.*$/
#     - /^feature\/\d+\.\d+\.\d+$/
#   tags:
#     - k8s-frontend

build-dev:
  stage: build
  # cache:
  #   paths:
  #     - node_modules
  #   policy: pull
  script:
#    - npm i | while IFS= read -r line; do printf '%s %s\n' "$(date)" "$line"; done
    - GAIA_COMMIT_INFO=$IMAGE_VERSION npm run release | while IFS= read -r line; do printf '%s %s\n' "$(date)" "$line"; done

    - IMAGE=$REGISTRY_URL/$HARBOR_GROUP_NAME-dev/$APP_NAME:$IMAGE_VERSION
    - time docker build -f Dockerfile -t $IMAGE . --no-cache
    - time docker push $IMAGE

    - time docker rmi -f $(docker images -q $IMAGE)
  only:
    - dev
    - /^dev-.*$/
    - /^feature\/\d+\.\d+\.\d+$/

  tags:
    - k8s-frontend

build-release:
  stage: build
  script:
    - npm install -g yarn
    - yarn install
    - npm run build
    - IMAGE=$REGISTRY_URL/$HARBOR_GROUP_NAME-release-$BranchLabel/$APP_NAME:$IMAGE_VERSION
    - docker build -f Dockerfile -t $IMAGE . --no-cache
    - docker push $IMAGE
  only:
    - /^release\//
    - /^release\//
  tags:
    - k8s-frontend
